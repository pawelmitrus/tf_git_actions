# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        type: environment
        required: true
      deployment:
        description: 'Deploy to target env'
        required: true
        type: boolean
  pull_request:
    types: [closed]


permissions:
  contents: read

env:
  ENVIRONMENT: development
  DEPLOYMENT: false

jobs:
  log-the-inputs:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Environment: $ENVIRONMENT"
          echo "Deployment: $DEPLOYMENT"
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          DEPLOYMENT: ${{ inputs.deployment }}
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{env.ENVIRONMENT}} 
    # if: github.event.pull_request.merged == true

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # - name: Log in with Azure
    #   run: az login --service-principal -u '${{ secrets.CLIENT_ID}}' -p '${{ secrets.CLIENT_SECRET}}' --tenant '${{ secrets.TENANT_ID}}'

    - name: Export env variables to azure auth for tf
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.CLIENT_ID}}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET}}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.TENANT_ID}}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID}}" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -var-file="conf/${{vars.ENV}}.conf" -backend-config="backend/${{vars.ENV}}.tfbackend"

    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file="conf/${{vars.ENV}}.conf"


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || ${{env.DEPLOYMENT}}
      run: terraform fmt -check

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || ${{env.DEPLOYMENT}}
      run: terraform apply -auto-approve -input=false -var-file="conf/${{vars.ENV}}.conf"