name: 'CICD'

on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        type: choice
        required: true
        default: dev
        options:
          - dev
          - test
          - prod
      deployment:
        description: 'Deploy to target env'
        required: true
        type: boolean


permissions:
  contents: read

jobs:
  calculate_variables:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-vars.outputs.environment }}
      deployment: ${{ steps.set-vars.outputs.deployment }}
    steps:
      - name: set-vars
        id: set-vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::set-output name=environment::${{ inputs.environment }}"
            echo "::set-output name=deployment::${{ inputs.deployment }}"
          else
            echo "::set-output name=environment::dev"
            echo "::set-output name=deployment::false"
          fi

  terraform:
    name: terraform
    runs-on: ubuntu-latest
    needs: calculate_variables
    env:
      ENVIRONMENT: ${{ needs.calculate_variables.outputs.environment }}
      DEPLOYMENT: ${{ needs.calculate_variables.outputs.deployment }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # - name: Log in with Azure
    #   run: az login --service-principal -u '${{ secrets.CLIENT_ID}}' -p '${{ secrets.CLIENT_SECRET}}' --tenant '${{ secrets.TENANT_ID}}'

    - name: Export env variables to azure auth for tf
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.CLIENT_ID}}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET}}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.TENANT_ID}}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID}}" >> $GITHUB_ENV

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd terraform && terraform init -var-file="conf/${{env.ENVIRONMENT}}.conf" -backend-config="backend/${{env.ENVIRONMENT}}.tfbackend"

    - name: Terraform Validate
      run: cd terraform && terraform validate

      # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan -input=false -var-file="conf/${{env.ENVIRONMENT}}.conf"

      # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      if: env.DEPLOYMENT == 'true'
      run: cd terraform && terraform fmt -check 

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: env.DEPLOYMENT == 'true'
      run: cd terraform && terraform apply -auto-approve -input=false -var-file="conf/${{env.ENVIRONMENT}}.conf"